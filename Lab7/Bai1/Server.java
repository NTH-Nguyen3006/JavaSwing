/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Lab7.Bai1;

import javax.swing.*;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;


public class Server extends javax.swing.JFrame implements Runnable{
    @Override
    public void run() {
        while (true) {
            if (socket != null){
                try {
//                    System.out.println(socket.getInputStream());
                    DataInputStream dis = new DataInputStream(
                            socket.getInputStream());

                    String reply = dis.readUTF();
                    StringBuilder builder = new StringBuilder(historyChatBox.getText());
                    builder.append("\n").append(reply);
                    historyChatBox.setText(builder.toString());

                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }
//        while (true) {
//            if (socket != null) {
//                DataOutputStream dos = null;
//                DataInputStream dis = null;
//                try {
//                    dis = new DataInputStream(socket.getInputStream());
////                    dos = new DataOutputStream(socket.getOutputStream());
//
//                    System.out.println("Client connected: " + socket.getInetAddress());
//
//                    while (true) { // Tiếp tục đọc dữ liệu từ client
//                        try {
//                            System.out.println("Waiting for client input...");
//                            String reply = dis.readUTF();
//                            System.out.println("Client says: " + reply);
//                            StringBuilder builder = new StringBuilder(historyChatBox.getText());
//                            builder.append("Client: ").append(reply).append("\n");
//                            historyChatBox.setText(builder.toString());
//                        } catch (EOFException e) {
//                            System.out.println("Client disconnected gracefully.");
//                            break; // Thoát khỏi vòng lặp bên trong cho client này
//                        } catch (IOException e) {
//                            System.err.println("Error reading from client: " + e.getMessage());
//                            break; // Thoát khỏi vòng lặp bên trong do lỗi IO
//                        }
//                    }
//
//                } catch (IOException e) {
//                    System.err.println("Error handling client connection: " + e.getMessage());
//                } finally {
//                    try {
//                        if (dis != null) dis.close();
////                        if (dos != null) dos.close();
//                        if (socket != null && !socket.isClosed()) socket.close();
//                        socket = null; // Đặt lại socket để chuẩn bị cho kết nối tiếp theo
//                        System.out.println("Client connection closed.");
//                    } catch (IOException e) {
//                        System.err.println("Error closing resources: " + e.getMessage());
//                    }
//                }
//            }
//            // Có thể thêm một khoảng trễ nhỏ ở đây nếu vòng lặp bên ngoài tiếp tục chạy để tránh việc chiếm dụng CPU quá mức
//            try {
//                Thread.sleep(100);
//            } catch (InterruptedException e) {
//                Thread.currentThread().interrupt();
//            }
//        }
    }
    /**
     * Creates new form Bai1
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        portField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyChatBox = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        sendBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(100, 200));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SERVER");

        startBtn.setText("Bắt đầu");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 0));
        jLabel2.setText("Port:");

        historyChatBox.setEditable(false);
        historyChatBox.setColumns(20);
        historyChatBox.setRows(5);
        jScrollPane1.setViewportView(historyChatBox);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 0));
        jLabel3.setText("Chat box");

        sendBtn.setBackground(new java.awt.Color(51, 153, 255));
        sendBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        sendBtn.setForeground(new java.awt.Color(255, 255, 255));
        sendBtn.setText("Gửi");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        messageField.setColumns(20);
        messageField.setRows(5);
        jScrollPane2.setViewportView(messageField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(startBtn))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(49, 49, 49))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBtn)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        startBtn.setEnabled(false);
        try {
            serverSocket = new ServerSocket(Integer.parseInt(portField.getText()));
            historyChatBox.setText("Connecting.......");
            socket = serverSocket.accept();
            historyChatBox.setText("Đã có 1 kết nối có địa chỉ: " + socket.getInetAddress().toString());
            new Thread(this).start();
        } catch (Exception e) {
            startBtn.setEnabled(true);
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Vui lòng nhập đúng cú pháp port");

            historyChatBox.setText(e.getMessage() + "\nConnect Failed.");
        }
    }//GEN-LAST:event_startBtnActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        try {
            DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
            dos.writeUTF(accountName.append(messageField.getText()).append("\n").toString());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        messageField.setText("");

    }//GEN-LAST:event_sendBtnActionPerformed

    private ServerSocket serverSocket = null;
    private Socket socket = null;
    private StringBuilder accountName = new StringBuilder("Server: ");

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea historyChatBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea messageField;
    private javax.swing.JTextField portField;
    private javax.swing.JButton sendBtn;
    private javax.swing.JButton startBtn;
    // End of variables declaration//GEN-END:variables
}
